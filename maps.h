int mapCreate01 (int *potions, int *keys, int *attack, int *defense, int *health)
{
    // Empty Map
    int tower_level = 1;

    int map01[20][61] = {{219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,},
    {219,178,178,178,178,178,219,178,178,178,178,178,178,178,178,178,219,178,178,178,178,178,178,219,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,219,178,178,178,178,178,178,178,178,178,219,178,178,219,178,178,178,178,178,178,178,219,},
    {219,176,176,176,176,176,219,176,176,176,176,176,176,176,176,176,178,176,176,176,176,176,176,219,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,219,176,176,176,176,176,176,176,176,176,219,176,176,219,176,176,176,176,176,176,176,219,},
    {219,176,176,176,176,176,176,176,176,176,219,176,176,176,176,176,176,176,176,176,176,176,176,219,176,176,219,219,219,219,219,219,219,219,219,176,176,176,176,219,176,176,176,176,219,176,176,176,176,219,176,176,178,176,176,176,176,176,176,176,219,},
    {219,176,176,176,176,176,219,176,176,176,219,176,176,176,176,176,219,176,176,176,176,176,176,219,176,176,178,178,178,178,178,178,178,178,219,176,176,176,176,219,176,176,176,176,219,176,176,176,176,219,176,176,176,176,176,176,176,176,176,176,219,},
    {219,219,219,219,219,219,219,176,176,176,219,176,176,176,176,176,219,176,176,176,176,176,176,219,176,176,176,176,176,176,176,176,176,176,219,176,176,176,176,219,176,176,176,176,219,176,176,176,176,219,219,219,219,219,219,219,219,219,219,176,219,},
    {219,178,178,178,178,178,219,176,176,176,219,176,176,176,176,176,219,219,219,176,219,219,219,219,219,219,219,219,219,219,219,219,219,176,219,176,176,176,176,219,176,176,176,176,219,176,176,176,176,219,178,178,178,178,178,178,178,178,178,176,219,},
    {219,176,176,176,176,176,219,176,176,176,219,176,176,176,176,176,219,178,178,176,178,178,178,178,178,178,178,178,178,178,178,219,178,176,219,176,176,176,176,219,176,176,176,176,219,176,176,176,176,219,176,176,176,176,176,176,176,176,176,176,219,},
    {219,176,176,176,176,176,178,176,176,176,219,176,176,176,176,176,219,176,176,176,176,176,176,176,176,176,176,176,176,176,176,219,176,176,219,176,176,176,176,219,176,176,176,176,219,176,176,176,176,219,176,176,219,176,176,176,176,219,176,176,219,},
    {219,176,176,176,176,176,176,176,176,176,219,176,176,176,176,176,219,176,176,219,176,176,176,176,176,176,176,176,219,176,176,219,176,176,219,176,176,176,176,219,176,176,176,176,219,176,176,176,176,219,176,176,178,176,176,176,176,178,176,176,219,},
    {219,219,219,219,219,219,219,176,176,176,219,176,176,176,176,176,219,176,176,178,176,176,176,176,176,176,176,176,178,176,176,178,176,176,219,176,176,176,176,219,176,176,176,176,219,176,176,176,176,219,176,176,176,176,176,176,176,176,176,176,219,},
    {219,178,178,178,178,178,219,176,176,176,219,176,176,176,176,176,219,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,219,176,176,176,176,219,176,176,176,176,219,176,176,176,176,219,176,176,176,176,176,176,176,176,176,176,219,},
    {219,176,176,176,176,176,219,176,176,176,219,176,176,176,176,176,219,176,176,176,176,176,176,176,176,176,176,176,176,176,176,219,176,176,219,176,176,176,176,219,176,176,176,176,219,176,176,176,176,219,176,176,176,176,176,176,176,176,176,176,219,},
    {219,176,176,176,176,176,176,176,176,176,219,176,176,176,176,176,219,176,176,176,176,176,176,176,176,176,176,176,176,176,176,219,219,219,219,219,219,176,219,219,219,219,176,219,219,219,219,176,219,219,176,176,219,176,176,176,176,219,176,176,219,},
    {219,176,176,176,176,176,219,176,176,176,219,176,176,176,176,176,219,176,176,176,176,176,176,176,176,176,176,176,176,176,176,219,178,178,178,178,178,176,178,219,178,178,176,178,219,178,178,176,178,219,176,176,178,176,176,176,176,178,176,176,219,},
    {219,219,219,219,219,219,219,176,176,176,219,219,219,219,176,176,219,176,176,176,176,176,176,176,176,176,176,176,176,176,176,219,176,176,176,176,176,176,176,219,176,176,176,176,219,176,176,176,176,219,176,176,176,176,176,176,176,176,176,176,219,},
    {219,178,178,178,178,178,219,176,176,176,219,178,178,178,176,176,219,176,176,219,176,176,176,176,176,176,176,176,219,176,176,219,176,176,176,176,176,176,176,219,176,176,176,176,219,176,176,176,176,219,219,176,219,219,219,219,219,219,219,219,219,},
    {219,176,176,176,176,176,178,176,176,176,219,176,176,176,176,176,219,176,176,178,176,176,176,176,176,176,176,176,178,176,176,219,176,176,176,176,176,176,176,219,176,176,176,176,219,176,176,176,176,178,178,176,178,178,178,178,178,178,178,178,219,},
    {219,176,176,176,176,176,176,176,176,176,219,176,176,176,176,176,219,176,176,176,176,176,176,176,176,176,176,176,176,176,176,219,176,176,176,176,176,176,176,219,176,176,176,176,219,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,219,},
    {219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,}};
    
    // Map assests
    map01[13][6] = V_DOOR;
    map01[3][6] = V_DOOR;
    map01[6][19] = H_DOOR;
    map01[6][33] = H_DOOR;
    map01[16][39] = V_DOOR;
    map01[13][47] = H_DOOR;
    map01[16][51] = H_DOOR;
    map01[3][2] = WEAPON;
    map01[13][2] = POTION;
    map01[14][11] = KEY;
    map01[18][30] = KEY;
    map01[12][35] = KEY;
    map01[2][40] = KEY;
    map01[18][45] = KEY;
    map01[7][50] = KEY;
    map01[16][11] = LEVER_ON;
    map01[14][32] = LEVER_ON;
    map01[17][59] = LEVER_ON;
    map01[3][16] = BARRIER;
    map01[13][42] = BARRIER;
    map01[5][59] = BARRIER;
    //map01[10][14] = ENEMY;
    //map01[13][21] = ENEMY;
    //map01[12][28] = ENEMY;
    //map01[17][34] = ENEMY;
    //map01[7][47] = ENEMY;
    //map01[11][54] = ENEMY;
    map01[8][2] = LORE;
    map01[1][50] = EXIT;
    map01[1][51] = EXIT;
    // Player's initial position
    int vert = 17, horz = 2;
    // Player's Inventory
    int pots = *potions;
    int ks = *keys;
    int atk = *attack;
    int def = *defense;
    int hp = *health;
    // Enemies' initial position
    int enemy_vert_01 = 10, enemy_horz_01 = 14;
    int enemy_vert_02 = 13, enemy_horz_02 = 21;
    int enemy_vert_03 = 12, enemy_horz_03 = 28;
    int enemy_vert_04 = 17, enemy_horz_04 = 34;
    int enemy_vert_05 = 7, enemy_horz_05 = 47;
    int enemy_vert_06 = 11, enemy_horz_06 = 54;
    // Enemies' Status
    int enemy_attack_01, enemy_health_01;
    int enemy_attack_02, enemy_health_02;
    int enemy_attack_03, enemy_health_03;
    int enemy_attack_04, enemy_health_04;
    int enemy_attack_05, enemy_health_05;
    int enemy_attack_06, enemy_health_06;

    setEnemy_Goblin(&enemy_attack_01, &enemy_health_01, &tower_level);
    setEnemy_Skeleton(&enemy_attack_02, &enemy_health_02, &tower_level);
    setEnemy_Goblin(&enemy_attack_03, &enemy_health_03, &tower_level);
    setEnemy_Goblin(&enemy_attack_04, &enemy_health_04, &tower_level);
    setEnemy_Skeleton(&enemy_attack_05, &enemy_health_05, &tower_level);
    setEnemy_Slime(&enemy_attack_06, &enemy_health_06, &tower_level);

    do
    {
        //Check Player
        if (hp < 0)
        {
            return 0;
        }
        //Clear the Window
        refresh();
        //Set Player and Enemies Positions
        map01[vert][horz] = PLAYER;
        
        if (enemy_health_01 > 0) map01[enemy_vert_01][enemy_horz_01] = GOBLIN;
        else map01[enemy_vert_01][enemy_horz_01] = WALL;
        
        if (enemy_health_02 > 0) map01[enemy_vert_02][enemy_horz_02] = SKELETON;
        else map01[enemy_vert_02][enemy_horz_02] = WALL;
        
        if (enemy_health_03 > 0) map01[enemy_vert_03][enemy_horz_03] = GOBLIN;
        else map01[enemy_vert_03][enemy_horz_03] = WALL;
        
        if (enemy_health_04 > 0) map01[enemy_vert_04][enemy_horz_04] = GOBLIN;
        else map01[enemy_vert_04][enemy_horz_04] = WALL;
        
        if (enemy_health_05 > 0) map01[enemy_vert_05][enemy_horz_05] = SKELETON;
        else map01[enemy_vert_05][enemy_horz_05] = WALL;
        
        if (enemy_health_06 > 0) map01[enemy_vert_06][enemy_horz_06] = SLIME;
        else map01[enemy_vert_06][enemy_horz_06] = WALL;
        
        // Print Map
        printMap(map01);

        //MENU
        printf("| Press TAB to drink potions.\n| KEYS: %d \n| POTIONS: %d \n| HEALTH: %d \n| ATTACK: %d \n| DEFENSE: %d \n", ks, pots, hp, atk, def);

        // Check Colision for Combat
        checkColisionCombat(map01, &enemy_vert_01, &enemy_horz_01, &atk, &def, &enemy_attack_01, &hp, &enemy_health_01);
        
        checkColisionCombat(map01, &enemy_vert_02, &enemy_horz_02, &atk, &def, &enemy_attack_02, &hp, &enemy_health_02);
        
        checkColisionCombat(map01, &enemy_vert_03, &enemy_horz_03, &atk, &def, &enemy_attack_03, &hp, &enemy_health_03);
        
        checkColisionCombat(map01, &enemy_vert_04, &enemy_horz_04, &atk, &def, &enemy_attack_04, &hp, &enemy_health_04);
        
        checkColisionCombat(map01, &enemy_vert_05, &enemy_horz_05, &atk, &def, &enemy_attack_05, &hp, &enemy_health_05);
        
        checkColisionCombat(map01, &enemy_vert_06, &enemy_horz_06, &atk, &def, &enemy_attack_06, &hp, &enemy_health_06);
        
        // Get Player Input
        int KB_INPUT = _getch();
        // Move Player
        playerMovement(map01, &vert, &horz, &KB_INPUT);        
        // Action
        if (KB_INPUT == KB_SPC)
        {
            collectKey(map01, &vert, &horz, &ks);
            
            openDoor(map01, &vert, &horz, &ks);
            
            pull_Lever(map01, &vert, &horz, &tower_level);
            
            grabPotion(map01, &vert, &horz, &pots);
            
            readLore(map01, &vert, &horz, &tower_level);

            pickWeapon(map01, &vert, &horz, &atk);

            pickArmour(map01, &vert, &horz, &def);
            
            if (map01[vert - 1][horz] == EXIT)
            {
                return 0;
            }            
        }

        else if (KB_INPUT == KB_TAB)
        {
            drinkPotion(map01, &vert, &horz, &pots, &hp);
        }
        // Move Enemies
        enemyMovement(map01, &enemy_vert_01, &enemy_horz_01, &enemy_health_01);
        Sleep(0.5);        
        enemyMovement(map01, &enemy_vert_02, &enemy_horz_02, &enemy_health_02);
        Sleep(0.5);
        enemyMovement(map01, &enemy_vert_03, &enemy_horz_03, &enemy_health_03);
        Sleep(0.5);
        enemyMovement(map01, &enemy_vert_04, &enemy_horz_04, &enemy_health_04);
        Sleep(0.5);
        enemyMovement(map01, &enemy_vert_05, &enemy_horz_05, &enemy_health_05);
        Sleep(0.5);
        enemyMovement(map01, &enemy_vert_06, &enemy_horz_06, &enemy_health_06);
        Sleep(0.5);

    } while (1);    
}