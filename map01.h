void keyPickup (int a[20][41], int *y, int *x, int *k)
{
    if (a[*y - 1][*x] == KEY)
    {
        printf("You got a key!");
        *k += 1;
        a[*y - 1][*x] = FLOOR;
        _getch();
        clear_s();
    }

    else if (a[*y + 1][*x] == KEY)
    {
        printf("You got a key!");
        *k += 1;
        a[*y + 1][*x] = FLOOR;
        _getch();
        clear_s();
    }

    else if (a[*y][*x - 1] == KEY)
    {
        printf("You got a key!");
        *k += 1;
        a[*y][*x - 1] = FLOOR;
        _getch();
        clear_s();
    }

    else if (a[*y][*x + 1] == KEY)
    {
        printf("You got a key!");
        *k += 1;
        a[*y][*x + 1] = FLOOR;
        _getch();
        clear_s();
    }
}

void checkDoor (int a[20][41], int *y, int *x, int *k)
{
    if (a[*y - 1][*x] == DOOR)
    {
        if (*k > 0)
        {
            printf("This Door is now open");
            *k -= 1;
            a[*y - 1][*x] = FLOOR;
            _getch();
            clear_s();
        }

        else
        {
            printf("You don't have a key.");
            _getch();
            clear_s();
        }
    }

    else if (a[*y + 1][*x] == DOOR)
    {
        if (*k > 0)
        {
            printf("This Door is now open");
            *k -= 1;
            a[*y + 1][*x] = FLOOR;
            _getch();
            clear_s();
        }

        else
        {
            printf("You don't have a key.");
            _getch();
            clear_s();
        }
    }

    else if (a[*y][*x - 1] == DOOR)
    {
        if (*k > 0)
        {
            printf("This Door is now open");
            *k -= 1;
            a[*y][*x - 1] = FLOOR;
            _getch();
            clear_s();
        }

        else
        {
            printf("You don't have a key.");
            _getch();
            clear_s();
        }
    }

    else if (a[*y][*x + 1] == DOOR)
    {
        if (*k > 0)
        {
            printf("This Door is now open");
            *k -= 1;
            a[*y][*x + 1] = FLOOR;
            _getch();
            clear_s();
        }

        else
        {
            printf("You don't have a key.");
            _getch();
            clear_s();
        }
    }
}

void enemyMovement (int a[20][41], int *y, int *x)
{
    switch (rand() % 4)
    {
        case 0 :
        {
            if (a[*y - 1][*x] == FLOOR)
            {
                a[*y][*x] = FLOOR;
                *y -= 1;
                break;
            }

            else
            {
                break;
            } 
        }

        case 1 :
        {
            if (a[*y + 1][*x] == FLOOR)
            {
                a[*y][*x] = FLOOR;
                *y += 1;
                break;
            }

            else
            {
                break;
            } 
        }

        case 2 :
        {
            if (a[*y][*x - 1] == FLOOR)
            {
                a[*y][*x] = FLOOR;
                *x -= 1;
                break;
            }

            else
            {
                break;
            } 
        }

        case 3 :
        {
            if (a[*y][*x + 1] == FLOOR)
            {
                a[*y][*x] = FLOOR;
                *x += 1;
                break;
            }

            else
            {
                break;
            } 
        }
    }

}


void printMap (int a[20][41])
{
    clear();

    for (int y=0; y<20; y++)
    {
        for (int x=0; x<41; x++)
        {
            printf("%c", a[y][x]);
        }
        printf("\n");
    }
}

void mapCreate(void)
{
    // MAP
    int map01[20][41] = {{201,205,205,205,205,205,203,205,205,205,203,205,205,205,203,205,205,205,205,205,203,205,205,205,203,205,205,205,205,205,205,205,203,205,205,205,205,205,205,205,187,},
                        {186,178,178,178,178,178,202,178,178,178,202,178,178,178,186,178,178,178,178,178,202,178,178,178,186,178,178,178,178,178,178,178,186,178,178,178,178,178,178,178,186,},
                        {186,176,176,159,176,176,219,176,176,176,176,176,176,176,186,176,176,176,176,176,219,176,176,176,186,176,176,176,176,176,176,176,186,176,176,176,176,176,176,176,186,},
                        {186,176,176,176,176,176,203,176,176,176,203,176,176,176,186,176,176,176,176,176,203,176,176,176,186,176,176,176,176,176,176,176,186,176,176,176,176,176,176,176,186,},
                        {204,205,205,205,205,205,185,176,176,176,186,176,176,176,204,205,205,205,205,205,185,176,176,176,186,176,176,176,176,176,176,176,186,176,176,176,176,176,176,176,186,},
                        {186,178,178,178,178,178,202,176,176,176,186,176,176,176,186,178,178,178,178,178,186,176,176,176,186,176,176,176,176,176,176,176,186,176,176,176,176,176,176,176,186,},
                        {186,176,176,176,176,176,176,176,176,176,186,176,176,176,186,176,176,176,176,176,202,176,176,176,204,205,205,185,176,204,205,205,202,205,205,185,176,204,205,205,185,},
                        {186,176,176,176,176,176,203,176,176,176,186,176,176,176,186,176,176,176,176,176,219,176,176,176,186,178,178,178,176,178,178,178,178,178,178,178,176,178,178,178,186,},
                        {204,205,205,205,205,205,185,176,176,176,186,176,176,176,186,176,176,176,176,176,203,176,176,176,186,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,186,},
                        {186,178,178,178,178,178,202,176,176,176,186,176,176,176,186,176,176,176,176,176,186,176,176,176,186,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,186,},
                        {186,176,176,176,176,176,176,176,176,176,186,176,176,176,204,205,205,205,205,205,185,176,176,176,186,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,186,},
                        {186,207,176,176,176,176,203,176,176,176,186,176,176,176,186,178,178,178,178,178,186,176,176,176,186,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,186,},
                        {186,176,176,176,176,176,186,176,176,176,186,176,176,176,186,170,176,176,176,176,186,176,176,176,204,205,205,205,187,176,176,176,176,176,176,176,176,176,176,176,186,},
                        {204,205,205,205,205,205,185,176,176,176,186,176,176,176,186,176,176,176,176,176,186,176,176,176,186,178,178,178,202,176,176,176,176,176,176,176,176,176,176,176,186,},
                        {186,178,178,178,178,178,186,176,176,176,186,176,176,176,200,205,185,176,204,205,188,176,176,176,186,177,176,176,219,176,176,176,176,176,176,176,176,176,176,176,186,},
                        {186,176,176,176,176,176,202,176,176,176,186,176,176,176,178,178,178,176,178,178,178,176,176,176,186,177,176,176,203,176,176,176,176,176,176,176,176,176,176,176,186,},
                        {186,176,176,176,176,176,176,176,176,176,186,176,176,176,176,176,176,176,176,176,176,176,176,176,200,205,205,205,202,205,205,205,205,205,205,205,205,185,176,204,185,},
                        {186,176,176,176,176,176,203,176,176,176,186,176,176,176,176,176,176,176,176,176,176,176,176,176,178,178,178,178,178,178,178,178,178,178,178,178,178,178,176,178,186,},
                        {186,176,176,176,176,176,186,176,176,176,186,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,186,},
                        {200,205,205,205,205,205,202,205,205,205,202,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,188,}};

    

    map01[12][15] = KEY;

    map01[10][8] = KEY;

    map01[2][6] = DOOR;

    // POSITIONS

    int vertical = 17, horizontal = 2; // Start Position of the Player   

    int enemy_vertical_01 = 8, enemy_horizontal_01 = 8; // Enemy Position 01

    int key = 0;

    // MOVIMENT - COLISION

    do
    {
        map01[vertical][horizontal] = PLAYER;

        map01[enemy_vertical_01][enemy_horizontal_01] = ENEMY_1;
        
        printMap(map01);
        
        printf("| KEYS: %d\n", key);
        printf("| Press TAB for the Inventory\n");

        int KB_INPUT = _getch();

        // ENEMY

        enemyMovement(map01, &enemy_vertical_01, &enemy_horizontal_01);

        // PLAYER

        switch(KB_INPUT)
        {
            case KB_UP : 
            {
               if (map01[vertical - 1][horizontal] == FLOOR)
               {
                   map01[vertical][horizontal] = FLOOR;
                   vertical -= 1;
                   break;
               }

               else
               {
                   break;
               }
            }

            case KB_DW : 
            {
               if (map01[vertical + 1][horizontal] == FLOOR)
               {
                   map01[vertical][horizontal] = FLOOR;
                   vertical += 1;
                   break;
               }

               else
               {
                   break;
               }             
            }

            case KB_LF : 
            {
               if (map01[vertical][horizontal - 1] == FLOOR)
               {
                   map01[vertical][horizontal] = FLOOR;
                   horizontal -= 1;
                   break;
               }

               else
               {
                   break;
               }               
            }

            case KB_RG : 
            {
               if (map01[vertical][horizontal + 1] == FLOOR)
               {
                   map01[vertical][horizontal] = FLOOR;
                   horizontal += 1;
                   break;
               }

               else
               {
                   break;
               }             
            }

            case KB_ESC :
            {
                clear_s();
                printf("| Do you really wish to quit the game?\n");
                printf("| Press ENTER to confirm\n");
                printf("| Press ESC to continue playing\n");

                int OPTION = _getch();

                switch (OPTION)
                {
                    case KB_ENTER : 
                    {
                        exit(1);
                    }

                    case KB_ESC :
                    {
                        break;
                    }                    
                }            
            }

            case KB_SPC :
            {
                keyPickup(map01, &vertical, &horizontal, &key);
                checkDoor(map01, &vertical, &horizontal, &key);
                break;
            }

            case KB_TAB :
            {
                break;
            }

            default : break;
        }
    } while (1);

    Sleep(250);
}